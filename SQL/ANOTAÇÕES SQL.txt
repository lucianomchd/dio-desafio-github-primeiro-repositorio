-- CRIAR TABELA

CREATE TABLE TABELA_DE_CLIENTES(
	CPF VARCHAR(11) NOT NULL,
	NOME VARCHAR(100) NULL,
	ENDERECO_1 VARCHAR(150) NULL,
	ENDERECO_2 VARCHAR(150) NULL,
	BAIRRO VARCHAR(50) NULL,
	CIDADE VARCHAR(50) NULL,
	ESTADO VARCHAR(2) NULL,
	CEP VARCHAR(8) NULL,
	DATA_DE_NASCIMENTO DATE NULL,
	IDADE INTEGER NULL,
	GENERO VARCHAR(1) NULL,
	LIMITE_DE_CREDITO FLOAT NULL,
	VOLUME_DE_COMPRA FLOAT NULL,
	PRIMEIRA_COMPRA BIT NULL);

CREATE TABLE TABELA_DE_PRODUTOS(
	CODIGO_DO_PRODUTO VARCHAR(10) NOT NULL,
	NOME_DO_PRODUTO VARCHAR(50) NULL,
	EMBALAGEM VARCHAR(20) NULL,
	TAMANHO VARCHAR(10) NULL,
	SABOR VARCHAR(20) NULL,
	PRECO_DE_LISTA FLOAT NOT NULL);


CREATE TABLE TABELA_DE_VENDEDORES(
	MATRICULA VARCHAR(5) NOT NULL,
	NOME VARCHAR(100) NULL,
	PERCENTUAL_COMISSAO FLOAT NULL,
	DATA_ADMISSAO DATE NULL,
	DE_FERIAS BIT NULL,
	BAIRRO VARCHAR(50) NULL);

 CREATE TABLE NOTAS_FISCAIS(
	CPF VARCHAR(11) NOT NULL,
	MATRICULA VARCHAR(5) NOT NULL,
	DATA_VENDA DATE NULL,
	NUMERO INTEGER NOT NULL,
	IMPOSTO FLOAT NOT NULL);

   CREATE TABLE ITENS_NOTAS_FISCAIS(
	NUMERO INTEGER NOT NULL,
	CODIGO_DO_PRODUTO VARCHAR(10) NOT NULL,
	QUANTIDADE INTEGER NOT NULL,
	PRECO FLOAT NOT NULL); 

-- VALORES CLIENTES ALURA

INSERT INTO TABELA_DE_CLIENTES (CPF, NOME, ENDERECO_1, ENDERECO_2, BAIRRO, CIDADE, ESTADO, CEP, DATA_DE_NASCIMENTO, IDADE, GENERO, LIMITE_DE_CREDITO, VOLUME_DE_COMPRA, PRIMEIRA_COMPRA) VALUES ('492472718', 'Eduardo Jorge', 'R. Volta Grande', '', 'Tijuca', 'Rio de Janeiro', 'RJ', '22012002', '1994-07-19', 23, 'M', 75000.0000, 9500, 1),
('50534475787', 'Abel Silva ', 'Rua Humaita', '', 'Humaita', 'Rio de Janeiro', 'RJ', '22000212', '1995-09-11', 22, 'M', 170000.0000, 26000, 0),
('5576228758', 'Petra Oliveira', 'R. Benicio de Abreu', '', 'Lapa', 'Sao Paulo', 'SP', '88192029', '1995-11-14', 22, 'F', 70000.0000, 16000, 1),
('5648641702', 'Paulo Cesar Mattos', 'Rua Helio Beltrao', '', 'Tijuca', 'Rio de Janeiro', 'RJ', '21002020', '1991-08-30', 26, 'M', 120000.0000, 22000, 0),
('5840119709', 'Gabriel Araujo', 'R. Manuel de Oliveira', '', 'Santo Amaro', 'Sao Paulo', 'SP', '80010221', '1985-03-16', 32, 'M', 140000.0000, 21000, 1),
('7771579779', 'Marcelo Mattos', 'R. Eduardo Luis Lopes', '', 'Bras', 'Sao Paulo', 'SP', '88202912', '1992-03-25', 25, 'M', 120000.0000, 20000, 1),
('8502682733', 'Valdeci da Silva', 'R. Srg. Edison de Oliveira', '', 'Jardins', 'Sao Paulo', 'SP', '82122020', '1995-10-07', 22, 'M', 110000.0000, 19000, 0),
('8719655770', 'Carlos Eduardo', 'Av. Gen. Guedes da Fontoura', '', 'Jardins', 'Sao Paulo', 'SP', '81192002', '1983-12-20', 34, 'M', 200000.0000, 24000, 0),
('9283760794', 'Edson Meilelles', 'R. Pinto de Azevedo', '', 'Cidade Nova', 'Rio de Janeiro', 'RJ', '22002002', '1995-10-07', 22, 'M', 150000.0000, 25000, 1),
('94387575700', 'Walber Lontra', 'R. Cel. Almeida', '', 'Piedade', 'Rio de Janeiro', 'RJ', '22000201', '1989-06-20', 28, 'M', 60000.0000, 12000, 1),
('95939180787', 'Fabio Carvalho', 'R. dos Jacarandas da Peninsula', '', 'Barra da Tijuca', 'Rio de Janeiro', 'RJ', '22002020', '1992-01-05', 16, 'M', 90000.0000, 18000, 1);


-- VALORES PRODUTOS ALURA

INSERT INTO TABELA_DE_PRODUTOS (CODIGO_DO_PRODUTO, NOME_DO_PRODUTO, EMBALAGEM, TAMANHO, SABOR, PRECO_DE_LISTA) VALUES ('1000889', 'Sabor da Montanha - 700 ml - Uva', 'Garrafa', '700 ml', 'Uva', 6.3090),
('1002334', 'Linha Citros - 1 Litro - Lima/Limao', 'PET', '1 Litro', 'Lima/Limao', 7.0040),
('1002767', 'Videira do Campo - 700 ml - Cereja/Maca', 'Garrafa', '700 ml', 'Cereja/Maca', 8.4100),
('1004327', 'Videira do Campo - 1,5 Litros - Melancia', 'PET', '1,5 Litros', 'Melancia', 19.5100),
('1013793', 'Videira do Campo - 2 Litros - Cereja/Maca', 'PET', '2 Litros', 'Cereja/Maca', 24.0100),
('1022450', 'Festival de Sabores - 2 Litros - Acai', 'PET', '2 Litros', 'Acai', 38.0120),
('1037797', 'Clean - 2 Litros - Laranja', 'PET', '2 Litros', 'Laranja', 16.0080),
('1040107', 'Light - 350 ml - Melancia', 'Lata', '350 ml', 'Melancia', 4.5550),
('1041119', 'Linha Citros - 700 ml - Lima/Limao', 'Garrafa', '700 ml', 'Lima/Limao', 4.9040),
('1078680', 'Frescor do Verao - 470 ml - Manga', 'Garrafa', '470 ml', 'Manga', 5.1795),
('1086543', 'Linha Refrescante - 1 Litro - Manga', 'PET', '1 Litro', 'Manga', 11.0105),
('1096818', 'Linha Refrescante - 700 ml - Manga', 'Garrafa', '700 ml', 'Manga', 7.7105),
('1101035', 'Linha Refrescante - 1 Litro - Morango/Limao', 'PET', '1 Litro', 'Morango/Limao', 9.0105),
('229900', 'Pedacos de Frutas - 350 ml - Maca', 'Lata', '350 ml', 'Maca', 4.2110),
('231776', 'Festival de Sabores - 700 ml - Acai', 'Garrafa', '700 ml', 'Acai', 13.3120),
('235653', 'Frescor do Verao - 350 ml - Manga', 'Lata', '350 ml', 'Manga', 3.8595),
('243083', 'Festival de Sabores - 1,5 Litros - Maracuja', 'PET', '1,5 Litros', 'Maracuja', 10.5120),
('290478', 'Videira do Campo - 350 ml - Melancia', 'Lata', '350 ml', 'Melancia', 4.5600),
('326779', 'Linha Refrescante - 1,5 Litros - Manga', 'PET', '1,5 Litros', 'Manga', 16.5105),
('394479', 'Sabor da Montanha - 700 ml - Cereja', 'Garrafa', '700 ml', 'Cereja', 8.4090),
('479745', 'Clean - 470 ml - Laranja', 'Garrafa', '470 ml', 'Laranja', 3.7680),
('520380', 'Pedacos de Frutas - 1 Litro - Maca', 'PET', '1 Litro', 'Maca', 12.0110),
('695594', 'Festival de Sabores - 1,5 Litros - Acai', 'PET', '1,5 Litros', 'Acai', 28.5120),
('723457', 'Festival de Sabores - 700 ml - Maracuja', 'Garrafa', '700 ml', 'Maracuja', 4.9120),
('746596', 'Light - 1,5 Litros - Melancia', 'PET', '1,5 Litros', 'Melancia', 19.5050),
('773912', 'Clean - 1 Litro - Laranja', 'PET', '1 Litro', 'Laranja', 8.0080),
('783663', 'Sabor da Montanha - 700 ml - Morango', 'Garrafa', '700 ml', 'Morango', 7.7090),
('788975', 'Pedacos de Frutas - 1,5 Litros - Maca', 'PET', '1,5 Litros', 'Maca', 18.0110),
('812829', 'Clean - 350 ml - Laranja', 'Lata', '350 ml', 'Laranja', 2.8080),
('826490', 'Linha Refrescante - 700 ml - Morango/Limao', 'Garrafa', '700 ml', 'Morango/Limao', 6.3105),
('838819', 'Clean - 1,5 Litros - Laranja', 'PET', '1,5 Litros', 'Laranja', 12.0080);


-- VALORES VENDEDORES ALURA

INSERT INTO TABELA_DE_VENDEDORES (MATRICULA, NOME, PERCENTUAL_COMISSAO, DATA_ADMISSAO, DE_FERIAS, BAIRRO) VALUES ('00235', 'Marcio Almeida Silva', 0.08, '2014-08-15', 0, 'Tijuca'),
('00236', 'Claudia Morais', 0.08,  '2013-09-17', 1, 'Jardins'),
('00237', 'Roberta Martins', 0.11,  '2017-03-18', 1, 'Copacabana'),
('00238', 'Pericles Alves', 0.11,  '2016-08-21', 0, 'Santo Amaro');


-- VALORES NF ALURA

INSERT INTO NOTAS_FISCAIS (CPF, MATRICULA, DATA_VENDA, NUMERO, IMPOSTO) VALUES ('7771579779','00235', '2015-01-01',100,0.1),
('50534475787','00237', '2015-01-01',101,0.12),
('8502682733','00236', '2015-01-01',102,0.12),
('5840119709','00235', '2015-01-01',103,0.12),
('1471156710','00235', '2015-01-01',104,0.12),
('94387575700','00236', '2015-01-01',105,0.1),
('3623344710','00237', '2015-01-01',106,0.1),
('5576228758','00236', '2015-01-01',107,0.1),
('19290992743','00237', '2015-01-01',108,0.12),
('94387575700','00236', '2015-01-01',109,0.12),
('5840119709','00235', '2015-01-01',110,0.12),
('492472718','00237', '2015-01-01',111,0.1),
('5840119709','00236', '2015-01-01',112,0.12),
('50534475787','00235', '2015-01-01',113,0.1),
('94387575700','00235', '2015-01-01',114,0.1),
('94387575700','00236', '2015-01-01',115,0.12),
('50534475787','00235', '2015-01-01',116,0.1),
('8719655770','00236', '2015-01-01',117,0.12),
('2600586709','00235', '2015-01-01',118,0.12),
('3623344710','00236', '2015-01-01',119,0.1),
('3623344710','00235', '2015-01-01',120,0.1),
('3623344710','00235', '2015-01-01',121,0.12),
('5648641702','00237', '2015-01-01',122,0.1),
('50534475787','00237', '2015-01-01',123,0.12),
('94387575700','00235', '2015-01-01',124,0.12),
('5840119709','00237', '2015-01-01',125,0.12),
('7771579779','00237', '2015-01-01',126,0.12),
('8502682733','00236', '2015-01-01',127,0.12),
('5648641702','00237', '2015-01-01',128,0.12),
('5840119709','00237', '2015-01-01',129,0.12),
('5576228758','00236', '2015-01-01',130,0.12),
('5840119709','00236', '2015-01-01',131,0.12),
('5576228758','00236', '2015-01-01',132,0.1),
('5576228758','00235', '2015-01-01',133,0.12),
('1471156710','00235', '2015-01-01',134,0.12),
('5648641702','00235', '2015-01-01',135,0.12),
('50534475787','00236', '2015-01-01',136,0.1),
('19290992743','00237', '2015-01-01',137,0.12),
('5648641702','00235', '2015-01-01',138,0.1),
('50534475787','00236', '2015-01-01',139,0.1);

-- VALORES ITENS NF ALURA

INSERT INTO ITENS_NOTAS_FISCAIS (NUMERO, CODIGO_DO_PRODUTO, QUANTIDADE, PRECO) VALUES (100, '1013793', 63, 24.01),
(100, '1101035', 26, 9.0105),
(100, '520380', 67, 12.011),
(100, '773912', 66, 8.008),
(101, '1000889', 35, 6.309),
(101, '479745', 65, 3.768),
(102, '1101035', 84, 9.0105),
(102, '235653', 37, 3.8595),
(102, '394479', 74, 8.409),
(103, '520380', 29, 12.011),
(104, '788975', 66, 18.011),
(105, '1037797', 98, 16.008),
(105, '1040107', 57, 4.555),
(105, '695594', 82, 28.512),
(106, '1004327', 19, 19.51),
(106, '773912', 11, 8.008),
(106, '826490', 24, 6.3105),
(107, '1096818', 91, 7.7105),
(107, '229900', 12, 4.211),
(107, '394479', 60, 8.409),
(108, '1013793', 70, 24.01),
(109, '231776', 18, 13.312),
(109, '243083', 85, 10.512),
(109, '812829', 11, 2.808),
(110, '1002767', 24, 8.41),
(110, '1013793', 24, 24.01),
(110, '231776', 84, 13.312),
(111, '1086543', 28, 11.0105),
(112, '229900', 20, 4.211),
(112, '243083', 73, 10.512),
(112, '326779', 87, 16.5105),
(112, '826490', 38, 6.3105),
(113, '1004327', 15, 19.51),
(113, '1086543', 55, 11.0105),
(113, '290478', 88, 4.56),
(113, '773912', 95, 8.008),
(114, '1004327', 42, 19.51),
(114, '1037797', 40, 16.008),
(114, '231776', 35, 13.312),
(114, '812829', 30, 2.808),
(115, '1078680', 36, 5.1795),
(115, '520380', 42, 12.011),
(116, '1013793', 73, 24.01),
(116, '1037797', 82, 16.008),
(117, '1000889', 70, 6.309),
(117, '1004327', 44, 19.51),
(117, '788975', 99, 18.011),
(118, '1022450', 61, 38.012),
(118, '1037797', 82, 16.008),
(118, '229900', 49, 4.211),
(118, '783663', 22, 7.709),
(119, '723457', 22, 4.912),
(120, '235653', 67, 3.8595);


-- ALTERAR TABELA COM CHAVE PRIMÁRIA

ALTER TABLE [TABELA DE PRODUTOS] ADD CONSTRAINT PK_TABELA_DE_PRODUTOS
PRIMARI KEY CLUSTERED ([CODIGO DO PRODUTO]);

ALTER TABLE [TABELA DE PRODUTOS] ALTER COLUMN [CODIGO DO PRODUTO] VARCHAR (20) NOT NULL;

-- EDITAR COLUNAS DA TABELA

UPDATE [TABELA DE CLIENTES]
SET [ENDERECO] = 'RUA AGNALDO FRANCISCO'
WHERE [CPF] = '09839000438';

-- DELETAR PRODUTO DA TABELA

DELETE FROM [TABELA DE PRODUTOS] WHERE [CODIGO DO PRODUTO] = '1040107';

-- CONSULTAR TABELA COM FILTROS

SELECT * FROM [TABELA DE PRODUTOS] WHERE EMBALAGEM = 'PET'; -- SELECIONADO OS PRODUTOS DE EMBALAGEM PET;
SELECT * FROM [TABELA DE PRODUTOS] WHERE [PRECO DE LISTA] < 7.00; -- SELECIONADO OS PRODUTOS COM VALORES MENOR QUE 7,00;
SELECT * FROM [TABELA DE PRODUTOS] WHERE [PRECO DE LISTA] > 7.00; -- SELECIONADO OS PRODUTOS COM VALORES MAIOR QUE 7,00;
SELECT * FROM [TABELA DE PRODUTOS] WHERE [PRECO DE LISTA] <> 7.00; -- SELECIONADO OS PRODUTOS COM VALORES DIFERENTE QUE 7,00;
SELECT * FROM [TABELA DE CLIENTES] WHERE [DATA DE NASCIMENTO] > '1989-10-16'; -- SELECIONADO CLIENTES NASCIDO ACIMA DA DATA INFORMADA;
SELECT * FROM [TABELA DE CLIENTES] WHERE YEAR ([DATA DE NASCIMENTO]) > '1989'; -- FUNÇÃO UTILIZADA PARA FILTRAR PELO ANO, PODE SER APLICADA COM A FUNÇÃO MONTH PARA MÊS E DAY PARA DIA;
SELECT [NOME], [ESTADO], [DATA DE NASCIMENTO], YEAR ([DATA DE NASCIMENTO]) AS ANO FROM [TABELA DE CLIENTES]

-- CONSULTA COM FILTROS COMPOSTOS

SELECT * FROM [TABELA DE PRODUTOS] WHERE [EMBALAGEM] = 'LATA' AND [SABOR] = 'JACA'; -- SELECIONARÁ TODOS OS PRODUTOS QUE TENHAM A EMBALAGEM 'LATA' E O SABOR 'JACA';
SELECT * FROM [TABELA DE PRODUTOS] WHERE [EMBALAGEM] = 'LATA' OR [SABOR] = 'JACA'; -- SELECIONARÁ TODOS OS PRODUTOS QUE TENHAM A EMBALAGEM 'LATA' OU O SABOR 'JACA';

-- ATUALIZAÇÃO DE MAIS DE UM REGISTRO, COM FILTRO (AUMENTANDO O PREÇO EM 10%)

UPDATE [TABELA DE PRODUTOS]
SET [PRECO DE LISTA] = [PRECO DE LISTA] * 1.1
WHERE [EMBALAGEM] = 'LATA';

-- QUANTIDADE DE LINHAS DE UMA TABELA

SELECT COUNT (*) FROM [TABELA DE PRODUTOS];

-- UTILIZANDO LIKE

SELECT * FROM TABELA_DE_PRODUTOS WHERE [SABOR] LIKE 'LIMAO%'; -- O SINAL DE PORCENTAGEM NO FINAL INDICARÁ OS REGISTROS QUE COMECEM COM LIMAO
SELECT * FROM TABELA_DE_PRODUTOS WHERE [SABOR] LIKE '%LIMAO'; -- O SINAL DE PORCENTAGEM NO INICIO INDICARÁ OS REGISTROS QUE TERMINEM COM LIMAO
SELECT * FROM TABELA_DE_PRODUTOS WHERE [SABOR] LIKE '%LIMAO%'; -- O SINAL DE PORCENTAGEM NO INICIO E NO FINAL INDICARÁ OS REGISTROS QUE TENHAM LIMAO ENTRE O INICIO E O FIM 

-- PESQUISA COMPOSTA UTILIZANDO FILTROS LIKE E AND

SELECT *FROM TABELA_DE_PRODUTOS WHERE (SABOR LIKE 'MORANGO%') AND (EMBALAGEM = 'PET'); -- A JUNÇÃO PARA REALIZAR ESSAS PESQUISAS É FEITA ATRAVÉS DE () EM CADA FUNÇÃO REALIZADA, POR EXEMPLO LIKE E AND.

-- SELECT DISTINCT

SELECT DISTINCT EMBALAGEM FROM TABELA_DE_PRODUTOS; -- NESTE FILTRO O BANCO TRARÁ TODAS AS INFORMAÇÕES QUE SEJAM DISTINTAS. POR EXEMPLO: TENHO VARIOS 30 PRODUTOS NA EMBALAGEM LATA, 50 NA PET E 20 NA GARRAFA, MAS ESSE FILTRO TRARÁ APENAS UMA DE CADA POR SEREM DISTINTAS UMA DA OUTRA.
SELECT DISTINCT EMBALAGEM, SABOR FROM TABELA_DE_PRODUTOS; -- NESTE FILTRO O BANCO TRARÁ A DISTINÇAÕ UTILIZANDO DADOS DOS DOIS CAMPOS MENCIONADOS, NESTE CASO EMBALAGEM E SABOR

-- SELECT TOP

SELECT TOP 5 * FROM TABELA_DE_PRODUTOS; -- O FILTRO TOP É UTILIZADO PARA CONSULTARMOS UM NUMERO EXATO DE LINHAS. NO EXEMPLO EU QUETO CONSULTAR AS 5 PRIMEIRAS LINHAS DA TABELA PRODUTOS. LEMBRANDO QUE ELE SEMPRE PEGARÁ DA PRIMEIRA LINHA EM DIANTE
SELECT TOP 5 * FROM TABELA_DE_PRODUTOS WHERE SABOR = 'MACA; -- TAMBÉM PODEMOS UTILIZAR OUTROS FILTROS. NESSE CASO ELE TRARÁ AS 5 PRIMEIRAS LINHAS QUE TENHAM O SABOR MAÇÃ.

-- SELECT ORDER BY (SAÍDA ORDENADA)

SELECT * FROM TABELA_DE_PRODUTOS ORDER BY PRECO_DE_LISTA; -- NO EXEMPLO ELE TRARÁ DO MENOR VALOR PARA O MAIOR, POIS SE A GENTE OMITE O COMANDO, ELE AUTOMATICAMENTE ENTENDERÁ QUE É PARA COMEÇAR ASCENDENTE (ASC)
SELECT * FROM TABELA_DE_PRODUTOS ORDER BY PRECO_DE_LISTA DESC; -- JÁ NESSE CASO EU EXECUTEI O COMANDO DESC (DESCENDENTE), ENTÃO ELE RETORNARÁ DO MAIOR PARA O MENOR
SELECT * FROM TABELA_DE_PRODUTOS ORDER BY NOME_DO_PRODUTO, EMBALAGEM, PRECO_DE_LISTA; -- NESTA CONSULTA EU EXECUTEI O ORDER BY EM VÁRIOS CAMPOS DA TABELA (TODAS EM ASC).
SELECT * FROM TABELA_DE_PRODUTOS ORDER BY NOME_DO_PRODUTO, EMBALAGEM, PRECO_DE_LISTA DESC; - JÁ NESTA AQUI A CONSULTA SERÁ EM ASC APENAS NO NOME DO PRODUTO E NA EMBALAGEM, NO PREÇO SERÁ DO MAIOR PARA O MENOR.

-- SELECT TOP E ORDER BY

SELECT TOP 5 * FROM TABELA_DE_PRODUTOS ORDER BY PRECO_DE_LISTA DESC; A CONSULTA SE DARÁ EM CIMA DOS 5 PRODUTOS MAIS CAROS DA TABELA, POIS ORDENEI O TOP 5 E UTILIZEI O COMANDO DESC.

-- GROUP BY (UTILIZADO PARA AGRUPAR CAMPOS, SENDO QUE UM DELES PRECISA TER UMA DAS 4 FUNÇÕES DE AGREGAÇÃO - SUM (SOMA) AVG (MEDIA) - MAX (MÁXIMO) - MIN (MINIMO)

SELECT CIDADE, SUM (IDADE) FROM TABELA_DE_CLIENTES GROUP BY CIDADE; -- O COMANDO TAMBÉM FUNCIONARÁ COMO UM DISTINCT E TRARÁ A SOMA DA IDADE DE TODOS OS CLIENTES DAS CIDADES DA TABELA 
SELECT CIDADE, AVG (IDADE) FROM TABELA_DE_CLIENTES GROUP BY CIDADE; -- O COMANDO TAMBÉM FUNCIONARÁ COMO UM DISTINCT E TRARÁ A MEDIA DA IDADE DE TODOS OS CLIENTES DAS CIDADES DA TABELA 
SELECT CIDADE, SMIN (IDADE) FROM TABELA_DE_CLIENTES GROUP BY CIDADE; -- O COMANDO TAMBÉM FUNCIONARÁ COMO UM DISTINCT E TRARÁ A MENOR IDADE DE TODOS OS CLIENTES DAS CIDADES DA TABELA 
SELECT CIDADE, MAX (IDADE) FROM TABELA_DE_CLIENTES GROUP BY CIDADE; -- O COMANDO TAMBÉM FUNCIONARÁ COMO UM DISTINCT E TRARÁ A MAIOR IDADE DE TODOS OS CLIENTES DAS CIDADES DA TABELA 

-- COUNT + GROUP BY

SELECT EMBALAGEM, COUNT (*) AS NUMERO_DE_PRODUTOS FROM TABELA_DE_PRODUTOS WHERE SABOR = 'LARANJA' GROUP BY EMBALAGEM; -- O COMANDO REALIZARÁ A CONTAGEM DOS PRODUTOS QUE TENHAM O SABOR LARANJA E FARÁ O AGRUPAMENTO COM O CAMPO DE EMBALAGEM.


-- HAVING (FILTRA CAMPOS AGREGADOS) - A FUNÇÃO HAVING É UTILIZADA PARA SUBSTITUIR O WHERE, QUE NÃO É PERMITIDO SER UTILIZADO EM CAMPOS COM AGREGRAÇÃO.

SELECT ESTADO, SUM (LIMITE_DE_CREDITO) AS CREDITO FROM TABELA_DE_CLIENTES GROUP BY ESTADO HAVING SUM (LIMITE_DE_CREDITO) >= 900000 -- NESSA CONSULTA PUXEI A SOMA DO LIMITE DOS CREDITOS AGRUPADO COM A TABELA ESTADO E FIZ O FILTRO PARA A CIDADE QUE TENHA O CREDITO MAIOR OU IGUAL A 900000

SELECT EMBALAGEM, MAX (PRECO_DE_LISTA) AS PRECO_MAX, MIN (PRECO_DE_LISTA) AS PRECO_MIN FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM HAVING (PRECO_MAX) >= 13; -- JÁ NESSA CONSULTA PUXEI O MAIOR E O MENOR PREÇO DE LISTA AGRUPADO COM A EMBALAGEM E FIZ O FILTRODOS PRODUTOS QUE TENHAM PREÇO MAXIMO MAIOR OU IGUAL A 4

-- CASE (SERVE PARA FAZER UMA CLASSIFICAÇÃO COM NOMES DENTRO DO SELECT)

SELECT NOME_DO_PRODUTO, PRECO_DE_LISTA, 
(CASE WHEN PRECO_DE_LISTA >=12 THEN 'PRODUTO CARO' -- AQUI EU EXECUTO O COMANDO INFORMANDO QUE SE O PRECO DE LISTA FOR IGUAL OU MAIOR QUE 12, ELE SERÁ CLASSIFICADO COMO PRODUTO CARO
      WHEN PRECO_DE_LISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA' -- AQUI EU EXECUTO O COMANDO INFORMANDO QUE SE O PRECO DE LISTA FOR MAIOR QUE 7 E MENOR OU IGUAL A 12, ELE SERÁ CLASSIFICADO COMO PRODUTO EM CONTA		
      ESLE 'PRODUTO BARATO' END) AS CLASSIFICACAO -- E AQUI EU USO O ELSE PARA DIZER QUE SE ELE NÃO TIVER NENHUMA DAS DUAS CONDIÇÕES MENCIONADAS ACIMA, SERÁ CLASSIFICADO COMO PRODUTO BARATO.
FROM [TABELA_DE_PRODUTOS] 
WHERE [PRECO_DE_LISTA] >0; (OBS O COMANDO PODE TER ALGUM ERRO)

-- INNER JOIN (JUNÇÃO INTERNA ENTRE AS TABELAS)

SELECT TC.CPF AS CPF_DO_CADASTRO, TC.NOME AS NOME_DO_CLIENTE, NF.CPF AS CPF_DA_NOTA
FROM TABELA_DE_CLIENTES TC
INNER JOIN NOTAS_FISCAIS NF
ON TC.CPF = NF.CPF;

NESSA JUNÇÃO EU PEGUEI O CAMPO CPF QUE É O EM COMUM ENTRE A TABELA DE CLIENTES E A TABELA DE NOTAS FISCAIS. ANTES DE COMEÇAR
O SELECT EU FIZ PRIMEIRO O FROM, CHAMANDO A TABELA DE CLIENTES E A NOMEANDO DE TC PEDINDO A JUNÇÃO (INNER JOIN) COM A 
TABELA DE NOTAS FISCAIS NOMEADA DE NF E USEI O ON PARA AFIRMAR QUE A O CPF DA TABELA DE CLIENTES, ERA IGUAL O CPF DA TABELA NF
DEPOIS DISSO QUE CHAMEI O SELECT.

SELECT DISTINCT TC.CPF AS CPF_DO_CADASTRO, TC.NOME AS NOME_DO_CLIENTE, NF.CPF AS CPF_DA_NOTA
FROM TABELA_DE_CLIENTES TC
INNER JOIN
NOTAS_FISCAIS NF
ON TC.CPF = NF.CPF;

AQUI EU FIZ A MESMA JUNÇÃO, PORÉM USEI O DISTINCT PARA SABER QUANTOS CLIENTES FIZERAM COMPRAS.

-- LEFT JOIN (TRAZ TODA A TABELA DA ESQUERDA (TABELA DE CLIENTES) E SÓ QUEM TEM ALGUMA LIGAÇÃO COM A TABELA DA DIREITA
(TABELA DE NF)

SELECT DISTINCT TC.CPF AS CPF_DO_CADASTRO, TC.NOME AS NOME_DO_CLIENTE, NF.CPF AS CPF_DA_NOTA
FROM TABELA_DE_CLIENTES TC
LEFT JOIN
NOTAS_FISCAIS NF
ON TC.CPF = NF.CPF;

NESSA JUNÇÃO O CPF DA TABELA DE CLIENTES QUE NÃO TIVER FEITO NENHUMA VENDA, APARECERÁ COM O CAMPO NULL, POIS NA TABELA NF
ELE ESTARÁ ZERADO POR NAO TER FEITO NENHUMA VENDA.

-- UNION (TEM A FUNÇÃO DE JUNTAR DUAS OU MAIS TABELAS. A REGRA PARA QUE SE EXECUTE DE FORMA CORRETA É QUE OS CAMPOS TENHAM A 
MESMA QUANTIDADE EM CADA TABELA, E QUE SEJAM DO MESMO TIPO (TEXTO, NÚMERO E ETC) E O UNION FUNCIONA COMO UM DISTINCT, RETORNA APENAS VALORES UNICOS. 

SELECT BAIRRO FROM TABELA_DE_VENDEDORES
UNION
SELECT BAIRRO FROM TABELA_DE_VENDEDORES;

-- UNION ALL (TEM A MESMA FUNÇÃO DO UNION, A DIFERENÇA É QUE ELE NÃO USA O DISTINCT) 

SELECT BAIRRO FROM TABELA_DE_VENDEDORES
UNION ALL
SELECT BAIRRO FROM TABELA_DE_VENDEDORES;

SELECT BAIRRO, 'CLIENTE' AS ORIGEM FROM TABELA_DE_VENDEDORES
UNION ALL
SELECT BAIRRO, 'FORNECEDOR' AS ORIGEM FROM TABELA_DE_VENDEDORES; -- AQUI AO INSERIR A ASPAS, EU PEÇO UM NOVO CAMPO, QUE TRARÁ COMO RESULTADO 
A INFORMAÇÃO SE NO BAIRRO MORA UM CLIENTE OU UM FORNECEDOR. 


-- IN (SUBQUERY) 

SELECT * FROM TABELA_DE_CLIENTES
WHERE BAIRRO IN (SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES); -- DENTRO DO PARENTESE FOI UMA CONSULTA REALIZADA NA TABELA DE VENDEDORES. 
AQUI FIZEMOS DUAS CONSULTAS EM APENAS UMA, OU UMA SUBQUERY. É OBRIGATORIO QUE A SUBQUERY POSSUA APENAS UM CAMPO, CASO CONTRARIO DARÁ ERRO.

-- CREATE VIEW (SERVE PARA CRIAR UMA VISÃO DE UMA TABELA QUE PODEMOS CONSULTAR QUANDO QUISERMOS)

CREATE VIEW MEDIA_EMBALAGENS AS
SELECT EMBALAGEM, AVG (PRECO_DE_LISTA) AS PRECO_MEDIO
FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM;

SELECT EMBALAGEM, PRECO_MEDIO
FROM MEDIA_EMBALAGENS
WHERE PRECO_MEDIO <=10;  -- AQUI UTILIZANDO A VISÃO NO FROM, EU RETORNEI O PREÇO MEDIO POR EMBALAGENS QUE SEJA MENOR OU IGUAL A 10. VEJA QUE NÃO FOI NECESSÁRIO UTILIZAR AVG (MEDIA), APENAS O QUE JÁ ESTÁ GRAVADO NA VISÃO.


-- FUNÇÕES DE TEXTO

LOWER (LETRA MINUSCULA)
UPPER (LETRA MAIUSCULA)
CONCAT (SERVE PARA CONCATENAR TEXTOS OU JUNÇÃO DE DOIS OU MAIS VALORES)
RIGHT (PEGA OS ULTIMOS CARACTERES DE UMA FRASE. VAI DE ACORDO COM A QUANTIDADE QUE MENCIONARMOS. EX: EU FUI ONTEM, 3; TRARÁ AS 3 ULTIMAS LETRAS)
LEFT ( É O INVERSO DO RIGHT)
REPLICATE (REPETE A FRASE DE ACORDO COM A QUANTIDADE QUE MENCIONARMOS)
SUBSTRING (RETORNA PARTE DE UMA FUNÇÃO QUE CONTA DO PONTO INICIAL ATÉ O PONTO QUE MENCIONARMOS. EX: 'EU FUI ONTEM', 2,5 RETORNARÁ U FUI, PORQUE O ESPAÇO CONTA COMO CARACTERE)
LTRIM (REMOVE TODO ESPAÇO EM BRANCO DO LADO ESQUERDO)
RTRIM (REMOVE TODO ESPAÇO EM BRANCO DO LADO DIREITO)
TRIM (REMOVE TODO ESPAÇO EM BRANCO DO LADO ESQUERDO E DO DIREITO)

REPLACE (SUBSTITUI UM CONJUNTO DE CARACTERES POR OUTRO ESPECIFICADO)
SELECT TAMANHO, REPLACE (TAMANHO, '700', '1400') AS TAMANHO_MODIFICADO FROM TABELA_DE_PRODUTOS;

LEN (RETORNA O NUMERO DE CARACTERES DO TEXTO INCLUINDO OS ESPAÇOS DO MEIO PARA FRENTE)

--FUNÇOES DE DATA

DATEADD (ADICIONA UM NUMERO (INTEIRO COM SINAL DE - OU +) A UM DATEPART DE UMA DATA DE ENTRADA E RETORNA UM VALOR DE DATA/HORA MODIFICADO.
SELECT DATEADD (DAY,10, GETDATE())

DATEDIFF (RETORNA A CONTAGEM DA DIFERENÇA ENTRE DOIS DATEPART)


GETDATE (RETORNA O MOMENTO EXATO EM QUE A FUNÇÃO FOI EXECUTADA, COM DATA E HORA)
SELECT GETDATE()

DAY (DIA)

MONTH (MES)

YEAR (ANO)

ISDATE (INFORMA SE A EXPRESSÃO É UMA DATA VÁLIDA OU NÃO. SE FOR FALSO RETORNA 0 E SE FOR VERDADEIRO RETORNA 1)

DATETIMEFROMPARTS (RETORNA UMA DATA EXATA DE UM PERIODO SEPARADOS POR VIRGULAS)

-- FUNÇÕES NUMERICAS

ROUND (RETORNA UM VALOR NUMERICO ARREDONDADO)
SELECT ROUND (3.638);

CEILING (RETORNA O MENOR INTEIRO MAIOR QUE OU IGUAL A EXPRESSÃO NUMERICA ESPECIFICADA)
SELECT CEILING (3.638);

FLOOR (RETORNA O MAIOR INTEIRO MENOR OU IGUAL A EXPRESSÃO NUMERICA ESPECIFICADA)

POWER (RETORNA A POTENCIA)

EXP (RETORNA O VALOR EXPONENCIAL DA EMPRESSÃO FLOAT ESPECIFICADA)

SQRT (RETORNA A RAIZ QUADRADA)

SIGN (RETORNA O SINAL POSITIVO OU NEGATIVO)

ABS (RETORNA O VALOR ABSOLUTO E SEMPRE POSITIVO)

% (CALCULA O RESTO ENTRE DOIS NUMEROS)


-- FUNÇÕES DE CONVERSÃO

CONVERT (CONVERTE UMA DATA PARA TEXTO)
SELECT CONVERT (VARCHAR (25), GETDATE (), 121) -- É IMPORTANTE QUE QUANDO FIZERMOS A CONVERSÃO PARA TEXTOS, COLOCARMOS
OS NUMEROS DE CARACTERES SUFICIENTES PARA EXIBIR A CONVERSÃO COMPLETA. OUTRO FATOR É O NÚMERO DA MÁSCARA (REPRESENTA CADA PADRÃO, ANSI, USA, FRANCE) NESSE EXEMPLO USEI O 121)

CAST (CONVERTE DE NUMERO PARA NUMERO)
